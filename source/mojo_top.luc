module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full

    /* SELF-MADE IO COMPONENTS*/

    input button[5],        // button for level control and to start the game

    output red_led,         // to display morse code
    output enter_led[2],    // to indicate which player to enter
    output guess_led[2],     // to indicate which player to guess

    output button_col[6],   // coloums in keypad
    input button_row[5],     // rows in keypad
    output seven_seg[7],
    output seg_sel[6],

    output gnd,
    output pwr

  ) {

  sig rst;                  // reset signal

  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
      state_m state_m;
    }
  }
  
  always {
    ////////////////////
    // INITIALIZATIONS//
    ////////////////////

    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset

    ////////////// turn LEDs off
    led = 8h00;

    ////////////// Unused
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port

    ////////////// Others
    red_led = state_m.red_led;
    enter_led = state_m.enter_led;      //RGB led off is 1
    guess_led = state_m.guess_led;      //RGB led off is 1
    seven_seg = state_m.seven_seg;
    seg_sel = state_m.seg_sel;
    gnd = 0;
    pwr = 1;
    button_col = state_m.button_col;
    state_m.button_row = button_row;
    state_m.button = button;

  }
}